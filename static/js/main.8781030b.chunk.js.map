{"version":3,"sources":["index.tsx","components/SearchForm/SearchForm.tsx","AppRouter.tsx","pages/MovieList/components/ListItem/ListItem.tsx","recoil/selectors/movieSelectors.ts","pages/MovieList/MovieList.tsx","hooks/useQuery.tsx","components/AppBackground/AppBackground.styled.tsx","components/AppBackground/AppBackground.tsx","components/ModalSpinner/ModalSpinner.styled.tsx","components/ModalSpinner/ModalSpinner.tsx","pages/HomePage/HomePage.styled.tsx","pages/HomePage/HomePage.tsx"],"names":["render","AppRouter","document","getElementById","SearchForm","title","year","Card","Body","Form","action","method","autoComplete","Group","controlId","Label","Control","name","type","placeholder","defaultValue","Button","variant","block","disabled","useState","isFront","setIsFront","useEffect","process","nextTick","globalThis","window","basename","fallback","exact","path","component","HomePage","MovieList","ListItem","props","ListGroup","Item","Row","Col","xs","sm","md","lg","Img","src","posterURL","Title","movieTitle","Text","children","searchMoviesByTitle","selectorFamily","key","get","t","y","a","axios","url","params","s","res","data","Response","Search","totalResults","searchParams","URLSearchParams","useLocation","search","Array","from","reduce","acc","value","useQuery","movies","useRecoilValue","Container","fluid","map","imdbID","Poster","Year","BackgroundImage","styled","div","StyledMatrixParallax","MatrixParallax","attrs","parallaxRate","color","Transparent","AppBackground","Spinner","FontAwesomeIcon","icon","faCompactDisc","className","ContainerHorizontalCenter","ContainerFullScreen","ModalSpinner","HeaderCentered","h1","FilmLogo","faFilm","AppLogo","ContainerCentered"],"mappings":"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","file":"static/js/main.8781030b.chunk.js","sourcesContent":["import React from 'react'\nimport { render } from 'react-snapshot'\nimport './index.scss'\nimport './types'\nimport AppRouter from './AppRouter'\n\n// You need bootstrap? $ yarn add bootstrap\n// See: https://create-react-app.dev/docs/adding-bootstrap\n// import 'bootstrap/dist/css/bootstrap.css';\n\n// Single-page application (SPA)\nrender(<AppRouter />, document.getElementById('root'))\n\n// If you want to Pre-render with react-snap\n// Step 1: install $ yarn add --dev react-snap\n// Step 2: add to package.json run script: \"postbuild\": \"react-snap\"\n// Step 3: Add to package.json: \"reactSnap\":{\"inlineCss\":true}\n// Step 3: replace to the script below.\n\n/*\nimport { hydrate, render } from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\n\nconst rootElement = document.getElementById('root')\nif (rootElement && rootElement!.hasChildNodes()) {\n  hydrate(<AppRouter />, rootElement)\n\n  // Precache - set to 'register' once you Pre-render\n  // If you want your app to work offline and load faster, you can change\n  // unregister() to register() below. Note this comes with some pitfalls.\n  // Learn more about service workers: http://bit.ly/CRA-PWA\n  serviceWorker.register()\n} else {\n  render(<AppRouter />, rootElement)\n}\n*/\n","import React from 'react'\nimport Card from 'react-bootstrap/Card'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\n\nconst SearchForm: React.FC<ISearchForm> = ({ title, year }): JSX.Element => (\n  <Card>\n    <Card.Body>\n      <Form action=\"search\" method=\"get\" autoComplete=\"off\">\n        <Form.Group controlId=\"movieTitle\">\n          <Form.Label>Title</Form.Label>\n          <Form.Control name=\"t\" type=\"text\" placeholder=\"Title\" defaultValue={title} />\n        </Form.Group>\n\n        <Form.Group controlId=\"movieYear\">\n          <Form.Label>Year</Form.Label>\n          <Form.Control name=\"y\" type=\"number\" placeholder=\"Year\" defaultValue={year} />\n        </Form.Group>\n\n        <Button variant=\"outline-primary\" type=\"submit\" block>\n          Search\n        </Button>\n        <Button variant=\"outline-secondary\" type=\"button\" block disabled>\n          I'm Feeling Lucky\n        </Button>\n      </Form>\n    </Card.Body>\n  </Card>\n)\n\nexport { SearchForm }\n\ninterface ISearchForm {\n  title?: string\n  year?: string\n}\n","// src/AppRouter.tsx\n\nimport React, { Suspense, useEffect, useState } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport { RecoilRoot } from 'recoil'\nimport { AppBackground } from './components/AppBackground'\nimport { ModalSpinner } from './components/ModalSpinner'\nimport { HomePage } from './pages/HomePage'\nimport { MovieList } from './pages/MovieList/MovieList'\n\nconst AppRouter: React.FC = (): JSX.Element | null => {\n  const [isFront, setIsFront] = useState(false)\n\n  useEffect(() => {\n    process.nextTick(() => {\n      if (globalThis.window ?? false) {\n        setIsFront(true)\n      }\n    })\n  }, [])\n\n  if (!isFront) return null\n\n  return (\n    <>\n      <AppBackground />\n      <Router basename={process.env.PUBLIC_URL}>\n        <RecoilRoot>\n          <Suspense fallback={<ModalSpinner />}>\n            <Switch>\n              <Route exact path=\"/\" component={HomePage} />\n              <Route exact path=\"/search\" component={MovieList} />\n            </Switch>\n          </Suspense>\n        </RecoilRoot>\n      </Router>\n    </>\n  )\n}\n\n/*\n// TODO EE: To replace Recoil with Redux Toolkit;\n\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\n<Router>\n  <Provider store={store}>\n    <Switch>\n      <Route exact path=\"/\" component={App} />\n    </Switch>\n  </Provider>\n</Router>\n\n */\n\n/*\n\n// TODO: EE: Without Recoil or Redux Toolkit;\n\n// src/AppRouter.tsx\n\nimport React, { FunctionComponent } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport App from './App'\n\nconst AppRouter: FunctionComponent = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={App} />\n      </Switch>\n    </Router>\n  )\n}\n\n */\n\nexport default AppRouter\n","import React from 'react'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Card from 'react-bootstrap/Card'\nimport ListGroup from 'react-bootstrap/ListGroup'\n\nconst ListItem: React.FC<IListItemProps> = (props): JSX.Element => (\n  <ListGroup.Item>\n    <Row>\n      <Col xs sm={12} md={5} lg={4}>\n        <Card>\n          <Card.Img src={props.posterURL} />\n        </Card>\n      </Col>\n      <Col xs sm=\"12\" md=\"7\" lg=\"8\">\n        <Card>\n          <Card.Body>\n            <Card.Title>{props.movieTitle}</Card.Title>\n            <Card.Text>{props.children}</Card.Text>\n          </Card.Body>\n        </Card>\n      </Col>\n    </Row>\n  </ListGroup.Item>\n)\n\nexport { ListItem }\n\nexport interface IListItemProps {\n  posterURL: string\n  movieTitle: string\n  children: React.ReactNode\n}\n","import { selectorFamily } from 'recoil'\nimport axios from 'axios'\n\ninterface Search {\n  Title: string\n  Year: string\n  imdbID: string\n  Type: string\n  Poster: string\n}\n\nexport interface SearchResponse {\n  Search: Search[]\n  totalResults: string\n  Response: 'True' | 'False'\n}\n\nexport const searchMoviesByTitle = selectorFamily({\n  key: 'getMoviesByTitle',\n  get: ({ t, y }: { t?: string; y?: string }) => async (): Promise<SearchResponse> => {\n    try {\n      const URL = 'https://www.omdbapi.com/?apikey=2cd19c6b&type=movie'\n\n      // TODO: move this into separate rest/ folder\n      const res = await axios({\n        url: URL,\n        method: 'get',\n        params: {\n          s: t,\n          y,\n        },\n      })\n\n      if (res.data.Response === 'False') {\n        return { Search: [], totalResults: '0', Response: 'False' }\n      }\n      return res.data\n    } catch (err) {\n      return { Search: [], totalResults: '0', Response: 'False' }\n    }\n  },\n})\n","import React from 'react'\nimport { RouteComponentProps } from 'react-router-dom'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport ListGroup from 'react-bootstrap/ListGroup'\nimport { useRecoilValue } from 'recoil'\nimport { SearchForm } from '../../components/SearchForm'\nimport { ListItem } from './components/ListItem'\nimport { useQuery } from '../../hooks/useQuery'\nimport { searchMoviesByTitle, SearchResponse } from '../../recoil/selectors/movieSelectors'\n\nexport const MovieList: React.FC<IMovieListProps> = (): JSX.Element => {\n  const { y, t } = useQuery<IMovieListQuery>()\n  const { Search: movies }: SearchResponse = useRecoilValue(searchMoviesByTitle({ y, t }))\n\n  return (\n    <>\n      <Container fluid=\"xl\">\n        <Row>\n          <Col xs sm=\"12\" md=\"4\" lg=\"3\">\n            <SearchForm title={t} year={y} />\n          </Col>\n          <Col>\n            {movies.map(({ Title, imdbID, Poster, Year }) => {\n              return (\n                <ListGroup key={imdbID}>\n                  <ListItem posterURL={Poster} movieTitle={Title}>\n                    {Year}\n                  </ListItem>\n                </ListGroup>\n              )\n            })}\n          </Col>\n        </Row>\n      </Container>\n    </>\n  )\n}\n\ninterface IMovieListQuery {\n  t?: string\n  y?: string\n}\n\ninterface IMovieListProps extends RouteComponentProps<{ name: string }> {}\n","import { useLocation } from 'react-router-dom'\n\nexport function useQuery<T = {}>(): Partial<T> {\n  const searchParams = new URLSearchParams(useLocation().search)\n\n  return Array.from(searchParams).reduce((acc, [key, value]) => {\n    return {\n      ...acc,\n      [key]: value,\n    }\n  }, {})\n}\n","import styled from 'styled-components'\nimport MatrixParallax from 'react-matrix-parallax'\n\nexport const BackgroundImage = styled.div`\n  background: #2b3e50 url(./background.jpg) no-repeat center 0;\n  background-attachment: fixed;\n  position: fixed;\n  width: 100vw;\n  height: 100vh;\n  opacity: 0.5;\n`\n\n// TODO: move this\nexport const matrixColor = 'rgba(122, 229, 114, 0.87)'\n\nexport const StyledMatrixParallax = styled(MatrixParallax).attrs({\n  parallaxRate: 50,\n  color: matrixColor,\n})``\n\nexport const Transparent = styled.div`\n  opacity: 0.6;\n`\n","import React from 'react'\nimport { BackgroundImage, StyledMatrixParallax, Transparent } from './AppBackground.styled'\n\nexport const AppBackground: React.FC = (): JSX.Element => (\n  <>\n    <BackgroundImage />\n    <Transparent>\n      <StyledMatrixParallax />\n    </Transparent>\n  </>\n)\n","import styled from 'styled-components'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCompactDisc } from '@fortawesome/free-solid-svg-icons'\n\n// TODO\nexport const matrixColor = 'rgba(122, 229, 114, 0.87)'\n\nexport const Spinner = styled(FontAwesomeIcon).attrs({\n  icon: faCompactDisc,\n  color: matrixColor,\n  className: 'fa-spin fa-10x ',\n})``\n\nexport const ContainerHorizontalCenter = styled.div.attrs({\n  className: 'text-center',\n})`\n  margin-left: auto;\n  margin-right: auto;\n  position: relative;\n`\n\nexport const ContainerFullScreen = styled.div.attrs({\n  className: 'w-100 h-100',\n})`\n  position: fixed;\n`\n","import React from 'react'\nimport { ContainerHorizontalCenter, ContainerFullScreen, Spinner } from './ModalSpinner.styled'\n\nexport const ModalSpinner: React.FC = (): JSX.Element => {\n  return (\n    <ContainerHorizontalCenter>\n      <ContainerFullScreen>\n        <div className=\"row h-100\">\n          <div className=\"col-sm-12 my-auto\">\n            <Spinner />\n          </div>\n        </div>\n      </ContainerFullScreen>\n    </ContainerHorizontalCenter>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faFilm } from '@fortawesome/free-solid-svg-icons'\n\n// TODO:\nexport const matrixColor = 'rgba(122, 229, 114, 0.87)'\n\nexport const HeaderCentered = styled.h1.attrs({\n  className: 'text-center',\n})`\n  color: ${matrixColor};\n  margin-top: -3rem;\n`\n\nconst FilmLogo = styled(FontAwesomeIcon).attrs({\n  icon: faFilm,\n  color: matrixColor,\n})`\n  opacity: 0.3;\n`\n\nexport const AppLogo: React.FC = (): JSX.Element => (\n  <div className=\"text-center\">\n    <span className=\"fa-stack fa-7x\">\n      <FilmLogo className=\"fa-stack-1x\" />\n    </span>\n  </div>\n)\n\nexport const ContainerCentered = styled.div`\n  width: 20rem;\n  margin-left: auto;\n  margin-right: auto;\n  position: relative;\n  top: 5rem;\n`\n","import React from 'react'\nimport { RouteComponentProps } from 'react-router-dom'\nimport { SearchForm } from '../../components/SearchForm'\nimport { AppLogo, ContainerCentered, HeaderCentered } from './HomePage.styled'\n\nexport const HomePage: React.FC<IHomePageProps> = (): JSX.Element => {\n  return (\n    <ContainerCentered>\n      <AppLogo />\n      <HeaderCentered>Movie Search</HeaderCentered>\n      <SearchForm />\n    </ContainerCentered>\n  )\n}\n\ninterface IHomePageProps extends RouteComponentProps<{ name: string }> {}\n"],"sourceRoot":""}